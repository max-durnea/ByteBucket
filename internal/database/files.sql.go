// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: files.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFile = `-- name: CreateFile :one

INSERT INTO files(id,user_id,object_key,file_name,mime_type,created_at)
VALUES($1,$2,$3,$4,$5,$6)
RETURNING id, user_id, object_key, file_name, mime_type, created_at
`

type CreateFileParams struct {
	ID        uuid.UUID
	UserID    uuid.UUID
	ObjectKey string
	FileName  string
	MimeType  string
	CreatedAt time.Time
}

func (q *Queries) CreateFile(ctx context.Context, arg CreateFileParams) (File, error) {
	row := q.db.QueryRowContext(ctx, createFile,
		arg.ID,
		arg.UserID,
		arg.ObjectKey,
		arg.FileName,
		arg.MimeType,
		arg.CreatedAt,
	)
	var i File
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ObjectKey,
		&i.FileName,
		&i.MimeType,
		&i.CreatedAt,
	)
	return i, err
}

const getFileById = `-- name: GetFileById :one

SELECT id, user_id, object_key, file_name, mime_type, created_at FROM files WHERE id = $1
`

func (q *Queries) GetFileById(ctx context.Context, id uuid.UUID) (File, error) {
	row := q.db.QueryRowContext(ctx, getFileById, id)
	var i File
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ObjectKey,
		&i.FileName,
		&i.MimeType,
		&i.CreatedAt,
	)
	return i, err
}
